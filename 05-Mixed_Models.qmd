---
title: "Code Demo 3: Introduction to Mixed Models"
author: "Juan Steibel and Austin Putz"
date: "Feb 4th, 2025"
format:
  html:
    theme: cosmo 
    toc: true
    toc-location: left
    number-depth: 4
    html-math-method: katex
    code-fold: false
    embed-resources: true
    standalone: true
    page-layout: full
editor: 
  markdown: 
    wrap: 72
---

<!-- Set CSS for Style in HTML Markdowns -->

```{css, echo=FALSE}
h1, h2, h3, h4 {
  color: #194A8D;
  text-align: center;
}
p {
  color: grey;
  font-size: 20px;
}
ul, ol {
  color: grey;
  font-size: 20px;
}
```

<!-- Set Knitr Options -->

```{r}
#| label: knitr_setup
#| warning: false
#| echo: false

# set options for knitr (engine that will render everything)
knitr::opts_chunk$set(cache      = TRUE,
                      echo       = TRUE,
                      warning    = TRUE,
                      error      = TRUE,
                      fig.height = 6,
                      fig.width  = 8,
                      dpi        = 180
                      )
```

<br>

## Setup

<!-- Setup Code -->

```{r}
#| label: packages 
#| warning: false 
#| echo: false

#==============================================================================#
# Packages
#==============================================================================#

# set list of packages
list_packages <- c("lme4", "lmerTest", "tidyverse")

# Check if these packages are installed and if not, install them
# load packages in list
for (i in 1:length(list_packages)){
  
  # get current package
  package <- as.character(list_packages[i])
  
  cat("Current Package:", package, "\n")
  
  if (package %in% installed.packages()){
    
    # print message
    cat("  Package is installed\n")
    cat("  Will load this package now\n")
    
    # load package
    suppressPackageStartupMessages(library(package, character.only = TRUE))
    
  } else {
    
    # print message
    cat("  Did not find package installed: ", package, "\n")
    cat("  I will install and load this package\n")
    
    # install package
    install.packages(package, repos = "https://cloud.r-project.org/")
    
    # load package
    suppressPackageStartupMessages(library(package, character.only = TRUE))
    
  }
  
}

```

```{r}
#| label: setup_code 
#| warning: false 
#| echo: true 

# remove all objects if restarting script
rm(list=ls())

# garbage collection (clean memory/RAM)
gc()

# print session info (all versions)
#sessionInfo()

#==============================================================================#
# Setup Options
#==============================================================================#

# set tibble width for printing all columns
options(tibble.width = Inf)

# remove scientific notation
options(scipen=999)

#==============================================================================#
# Set paths
#==============================================================================#


#==============================================================================#
# File names
#==============================================================================#

# file
#data_file = "pheno_ready.txt"

```

<br>

## Data

```{r}
#| label: data
#| echo: true
#| warning: true

#--------------------------------------------------------------------------------#
# Read Data
#--------------------------------------------------------------------------------#

# read in data (saved on Austin's github directory)
dts <- read.csv(paste0("https://raw.githubusercontent.com/austin-putz/"
                    ,"AnS_562_Linear_Models_S2023/main/Data/swine_data.csv"))

dts<-select(dts,ID,wt_birth,sex,perc_duroc,sire,dam,litter,car_wt, car_bf10,slgdt_cd)%>%na.omit()

# head
head(dts)

# size of dataset
dim(dts)

# table of dams
table(dts$dam)

# table of sires
table(dts$sire)

#------------------------------------------------------------------------------#
# Manage Data
#------------------------------------------------------------------------------#

# manage data
dts <- dts %>%
  mutate( 
    wt_birth_h = wt_birth * 10, # change to hectograms
    dam        = as.factor(dam),
    litter     = as.factor(litter),
    sire       = as.factor(sire),
    slgdt_cd   = as.factor(slgdt_cd)
  ) 

```

<br> <br>

## Fixed Models

$$
\boldsymbol{y} = \boldsymbol{X}\boldsymbol{\beta}  + 
\boldsymbol{e}
$$

Let:

-   n = number of observations
-   p = number of fixed effects to solve for

We need to solve this equation for $\boldsymbol{\beta}$.

-   $\boldsymbol{y}$ (n x 1) **vector** of response variable.
-   $\boldsymbol{X}$ (n x p) **coefficient** matrix for **fixed**
    effects
-   $\boldsymbol{\beta}$ (p x 1) is the solution vector of fixed effects
-   $\boldsymbol{e}$ (n x 1) **vector** of residuals (leftover not
    predicted)

### Sire model

Here we want to fit Sire as a fixed effect we also want to fit sex and %
Duroc as fixed effects.

```{r}
#| echo: true
#| warning: true



#------------------------------------------------------------------------------#
# Simplest model fixed sire  Model
#------------------------------------------------------------------------------#

# First: fit a simple linear model
lm1 <- lm(wt_birth_h ~ sire , 
            data=dts)

# print model
summary(lm1)

table(dts$sire)
emmeans::emm_options(opt.digits = FALSE)

emmeans::emmeans(lm1,specs = "sire")

lm1b <- lm(wt_birth_h ~ sire-1 , 
            data=dts)

# print model
summary(lm1b)


```

But we want to include other effects: Sex and % duroc

Let's add just % duroc

```{r}
#| echo: true
#| warning: true

#------------------------------------------------------------------------------#
# Simplest model fixed sire  Model
#------------------------------------------------------------------------------#

# First: fit a simple linear model
lm1 <- lm(wt_birth_h ~ sire + perc_duroc - 1, 
            data=dts)

# print model
summary(lm1)

emmeans::emmeans(lm1,specs = "sire")
mean(dts$perc_duroc)

#evaluate effect of covariate perc_duroc at mean effect:
0.5016*1.467

summary(lm1)$coef[,1]+0.5016*1.467
emmeans::emmeans(lm1,specs = "sire")

#make our life easier: Center all covariates!!!

dts<-mutate(dts,perc_durocs=perc_duroc-mean(perc_duroc))

summary(dts$perc_duroc)
summary(dts$perc_durocs)

lm1s <- lm(wt_birth_h ~ sire + perc_durocs - 1, 
            data=dts)

# print model
summary(lm1s)
emmeans::emmeans(lm1s,specs = "sire")
```

Now, let's add sex to the model:

```{r}
#| echo: true
#| warning: true

#------------------------------------------------------------------------------#
# Simplest model fixed sire  Model
#------------------------------------------------------------------------------#

# First: fit a simple linear model
lm2 <- lm(wt_birth_h ~ sire + perc_durocs +sex - 1, 
            data=dts)

# print model
summary(lm2)

emmeans::emmeans(lm2,specs = "sire")

X<-model.matrix(wt_birth_h ~ sire + perc_durocs +sex - 1, 
            data=dts)

head(X)

colMeans(X)
summary(lm2)$coef[,1]
summary(lm2)$coef[,1]+0.643*0.53247
emmeans::emmeans(lm2,specs = "sire")
```

Conclusion: when we treat a classification factor(sire) as a fixed
effect, we need to pay attention to the related estimable functions or
contrasts.

The expected value of a level of a factor is always estimable (the
effect of each sire).

If there are other variables in the model (covariates), we need to
consider those corrections.

<br> <br>

## Mixed Models

The current mixed model is:

$$
\boldsymbol{y} = \boldsymbol{X}\boldsymbol{\beta} + \boldsymbol{Z}\boldsymbol{u} + 
\boldsymbol{e}
$$

Let:

-   n = number of observations
-   p = number of fixed effects to solve for
-   m = number of random effects to solve for

We need to solve this equation for $\boldsymbol{\beta}$ and
$\boldsymbol{u}$.

-   $\boldsymbol{y}$ (n x 1) **vector** of response variable.
-   $\boldsymbol{X}$ (n x p) **coefficient** matrix for **fixed**
    effects
-   $\boldsymbol{\beta}$ (p x 1) is the solution vector of fixed effects
-   $\boldsymbol{Z}$ (n x m) **incidence** matrix for **random** effects
-   $\boldsymbol{u}$ (m x 1) solution vector of random effects
-   $\boldsymbol{e}$ (n x 1) **vector** of residuals (leftover not
    predicted)

### Random Sire model

Here we want to fit 1 random effect: the sire. We also want to fit sex
and % Duroc as fixed effects.

```{r}
#| echo: true
#| warning: true

#------------------------------------------------------------------------------#
# Model with random sire
#------------------------------------------------------------------------------#

# First: fit a simple linear model
# lmer is from the lme4 package (lme4::lmer())
mme <- lmer(wt_birth_h ~ sex + perc_durocs + (1|sire), 
            data=dts)

# print model
mme

# summary of model
summary(mme)

# calculate & print variance components estimates
vr <- VarCorr(mme)
vr
print(vr, comp="Variance")
print(vr, comp="Std.Dev.")

# notice sire variance: it is very small
sire_var=vr$sire[1]
error_var=attr(vr,"sc")^2

lambda<-sire_var/error_var
lambda

BLUPs<-ranef(mme)
LSM_sire<-emmeans::emmeans(lm2,"sire")

lsm<-predict(LSM_sire)
plot(lsm,unlist(BLUPs$sire))

```

Fixed and random effects are quite different in scale due to the sire
variance being just a fraction of the residual variance

But we have a problem here: sire has only 6 levels. It's hard to
estimate a variance of random effects for a factor with only six levels.

<br>

### Model with random Dam

In this model, we want to only fit dam as a random effect.

```{r}
#| echo: true
#| warning: true

#------------------------------------------------------------------------------#
# Model with random Dam
#------------------------------------------------------------------------------#

# fit model with only Dam as random
mmer <- lmer(wt_birth_h ~ sex + perc_durocs + (1|dam),
           data=dts)

# print model
mmer
summary(mmer)
summary(mme)

# calculate & print variance components estimates
vrr <- VarCorr(mmer)
print(vrr, comp="Variance")
print(vrr, comp="Std.Dev.")

# Can we Use a likelihood ratio test (LRT) to check for significance of sire variance vs Dam variance?
# NO: the two models are not nested.
# 就是说delete一个会得到另一个

#is it safe to assume that the variance of sire and the variance of dam should be equal?


```

### Similar models for other traits

We will estimate random sire and dam effects for other traits: Carcass
backfat depth and carcass weight

```{r}
#| echo: true
#| warning: true

#------------------------------------------------------------------------------#
# Models with random sires or random dams for other traits
#------------------------------------------------------------------------------#

# fit model with only Dam as random
mm1 <- lmer(car_bf10  ~ sex + perc_durocs + (1|dam),
           data=dts)
mm2 <- lmer(car_bf10  ~ sex + perc_durocs + (1|sire),
           data=dts)
summary(mm1)
summary(mm2)

mm3 <- lmer(car_wt  ~ sex + perc_durocs + (1|dam),
           data=dts)
mm4 <- lmer(car_wt   ~ sex + perc_durocs + (1|sire),
           data=dts)
summary(mm3)
summary(mm4)

# print model
mmer
summary(mmer)
summary(mme)

#In these cases, especially for backfat, sire and dam variances are very close to each other. We don't expect any maternal effects for the backfat depth at slaughter, and we do expect maternal effects for the birth weights.

```

## Extra random effectts

There may be other necessary random effects: For birthweight we may
consider random effects. For traits measured at slaughter we can
consider slaughtering groups. These two variables are classification
factors with many levels.

this types of factors lend themselves to be treated as random effects

now the resultig model can we writen as: 
$$
\boldsymbol{y} = \boldsymbol{X}\boldsymbol{\beta} + \sum_r{\boldsymbol{Z_r}\boldsymbol{u_r}} + 
\boldsymbol{e}
$$

Let:

-   n = number of observations
-   p = number of fixed effects to solve for
-   r = index of the random effect
-   $m_r$ = number of random coefficients to solve for in each effect

We need to solve this equation for $\boldsymbol{\beta}$ and
$\boldsymbol{u}$.

-   $\boldsymbol{y}$ (n x 1) **vector** of response variable.
-   $\boldsymbol{X}$ (n x p) **coefficient** matrix for **fixed**
    effects
-   $\boldsymbol{\beta}$ (p x 1) is the solution vector of fixed effects
-   $\boldsymbol{Z_r}$ (n x $m_r$) **incidence** matrices for **random** effects
-   $\boldsymbol{u_r}$ ($m_r$ x 1) solution vectors of random effects
-   $\boldsymbol{e}$ (n x 1) **vector** of residuals (leftover not
    predicted)

```{r}
#| echo: true
#| warning: true

table(dts$litter)
table(dts$slgdt_cd)

mmbw<-lmer(wt_birth_h ~ sex + perc_durocs +(1|sire)+(1|dam)+(1|litter),
           data=dts)
summary(mmbw)
```

Let's discuss in class what is the equivalence (or not) between litter,
sire, dam, etc

### Adding more random effects

We can use likelihood ratio tests to compare nested models

```{r}
#| echo: true
#| warning: true

table(dts$litter)
table(dts$slgdt_cd)

#covariance introduced by common random effect by all mixed model softwares
mmcbf<-lmer(car_bf10 ~ sex + perc_durocs +(1|sire)+(1|dam)+(1|litter)+(1|slgdt_cd ),
           data=dts)
summary(mmcbf)

mmcbfr<-lmer(car_bf10 ~ sex + perc_durocs +(1|litter)+(1|slgdt_cd ),
           data=dts)
summary(mmcbfr)

anova(mmcbf,mmcbfr)

summary(mmcbf)
summary(mmcbfr)


table(dts$slgdt_cd,dts$sire)
table(dts$slgdt_cd,dts$dam)
```

it is extremely difficult to diagnose colinearity between columns that
spann different random effects in a mixed model.

A consequence of extreme colinearity in these cases could be lack of
identifiability of different random effects, such that the corresponding
variances could not be estimated separately.
